# encoding: UTF-8
#
# Cript::Tester
#
require 'hidr'
require 'cript/conc'
require 'cript/ehash'

module Cript
  class Tester

    def initialize
      my_data = <<EOF

​​᠎﻿​​​᠎﻿﻿﻿﻿​﻿﻿᠎﻿﻿﻿᠎﻿﻿﻿​﻿​᠎﻿﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿﻿​​﻿​᠎﻿﻿​﻿​​﻿᠎﻿﻿﻿​﻿﻿​᠎﻿﻿​​​​﻿᠎﻿﻿﻿​﻿​​᠎﻿﻿​​﻿​﻿᠎﻿​﻿﻿﻿﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​​﻿​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​﻿﻿﻿﻿﻿᠎﻿﻿​​​﻿﻿᠎﻿﻿​﻿﻿﻿﻿᠎﻿﻿​﻿﻿﻿​᠎﻿﻿﻿​﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​﻿﻿﻿​᠎﻿﻿﻿​﻿​​᠎﻿​​​﻿​᠎﻿​᠎﻿﻿﻿​﻿﻿﻿᠎﻿﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​​​​﻿​᠎﻿​​​﻿​﻿᠎﻿​​​﻿﻿﻿᠎﻿​​﻿​​﻿᠎﻿​​﻿﻿﻿​᠎﻿​​​​​᠎﻿​﻿​​﻿​᠎﻿​﻿​​﻿﻿᠎﻿​​​​​﻿᠎﻿​​​​​᠎﻿​﻿​​​​᠎﻿​﻿​​﻿​᠎﻿​​﻿​​﻿᠎﻿​﻿​﻿﻿​᠎﻿​​​​​﻿᠎﻿​﻿​﻿​​᠎﻿​​​﻿​﻿᠎﻿​​​​​᠎﻿​​﻿​﻿﻿᠎﻿​​​﻿​﻿᠎﻿​﻿﻿​​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿​᠎﻿​​﻿﻿​﻿᠎﻿​​﻿​​﻿᠎﻿​​﻿​​﻿᠎﻿​​​​﻿﻿᠎﻿​﻿﻿​​​᠎﻿​﻿​​​﻿᠎﻿​​﻿​​﻿᠎﻿​​​​﻿​᠎﻿​​​​​﻿᠎﻿​​​​​﻿᠎﻿​​﻿​﻿﻿᠎﻿​​​​﻿​᠎﻿﻿​​﻿﻿﻿᠎﻿​﻿​​​﻿᠎﻿​​​﻿​​᠎﻿​​​﻿﻿﻿᠎﻿​﻿﻿​﻿​᠎﻿﻿​​​﻿᠎﻿​​​﻿﻿​᠎﻿​﻿​﻿﻿᠎﻿﻿﻿​﻿​﻿᠎﻿﻿​﻿﻿​᠎﻿​​​​​﻿᠎﻿​​​​﻿​᠎﻿​​​​﻿​᠎﻿﻿​​﻿​﻿᠎﻿​​​﻿﻿​᠎﻿​​﻿﻿﻿﻿᠎﻿​﻿﻿​​​᠎﻿​﻿﻿﻿﻿᠎﻿﻿﻿​​﻿᠎﻿﻿﻿​﻿​﻿᠎﻿​​﻿​﻿﻿᠎﻿﻿​﻿​​﻿᠎﻿​​﻿​​﻿᠎﻿﻿﻿​​​᠎﻿﻿​​﻿​​᠎﻿﻿﻿​​​﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿​​﻿﻿᠎﻿﻿​​﻿﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿​﻿​​​᠎﻿​​﻿​​﻿᠎﻿​﻿﻿​​​᠎﻿​﻿﻿​​​᠎﻿﻿​﻿﻿​​᠎﻿﻿​﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿​​​​﻿᠎﻿​﻿﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿﻿​﻿﻿​᠎﻿​​﻿﻿﻿﻿᠎﻿​​﻿​﻿​᠎﻿﻿﻿​​​᠎﻿​​﻿​​​᠎﻿​﻿​​​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿﻿﻿​​​᠎﻿​﻿​﻿﻿᠎﻿​﻿​​​​᠎﻿﻿​​﻿​﻿᠎﻿﻿﻿​​﻿﻿᠎﻿​﻿​᠎﻿​​​﻿﻿​᠎﻿﻿﻿​﻿​﻿᠎﻿​﻿​﻿﻿​᠎﻿​﻿​﻿﻿᠎﻿​​​​​﻿᠎﻿​﻿﻿​​﻿᠎﻿​​​​﻿​᠎﻿﻿​﻿﻿​᠎﻿﻿​﻿​​﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿﻿​﻿﻿﻿᠎﻿﻿﻿​​﻿​᠎﻿﻿﻿​​﻿﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿​﻿​​​᠎﻿​​​﻿﻿​᠎﻿﻿​​﻿﻿​᠎﻿​​​​﻿﻿᠎﻿﻿​​﻿​﻿᠎﻿​​﻿​﻿﻿᠎﻿﻿​﻿﻿﻿᠎﻿​​​﻿​﻿᠎﻿​﻿​﻿​﻿᠎﻿﻿﻿​﻿​​᠎﻿​﻿﻿​﻿​᠎﻿​​﻿﻿​​᠎﻿​​﻿﻿﻿​᠎﻿﻿﻿﻿​​​᠎﻿​﻿​​﻿​᠎﻿﻿﻿​﻿﻿​᠎﻿​﻿﻿​​​᠎﻿​﻿﻿​﻿​᠎﻿﻿​​​﻿​᠎﻿﻿​​​﻿​᠎﻿​﻿​​﻿﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿​﻿​​​᠎﻿​﻿​​​​᠎﻿​​﻿​​​᠎﻿​​​​​﻿᠎﻿​﻿​﻿​​᠎﻿​​​​﻿​᠎﻿﻿﻿​​​​᠎﻿﻿​​﻿﻿﻿᠎﻿﻿​﻿​​​᠎﻿﻿​​﻿​​᠎﻿﻿﻿​﻿﻿​᠎﻿﻿​​﻿﻿᠎﻿​​﻿​​﻿᠎﻿﻿﻿​﻿﻿﻿᠎﻿​﻿​​​​᠎﻿​​​﻿​​᠎﻿​​﻿​﻿​᠎﻿﻿﻿​​﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿﻿​​​᠎﻿﻿﻿​﻿​﻿᠎﻿﻿​﻿﻿​᠎﻿﻿​​​​﻿᠎﻿​​​​﻿​᠎﻿​​​​﻿​᠎﻿﻿​﻿﻿﻿᠎﻿​﻿​﻿﻿᠎﻿﻿​﻿​﻿᠎﻿​﻿​᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​​﻿​﻿﻿᠎﻿​​﻿﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​​﻿᠎﻿​​​﻿​﻿᠎﻿​﻿​﻿﻿​᠎﻿​​﻿​​﻿᠎﻿﻿​​﻿﻿﻿᠎﻿​​​​﻿﻿᠎﻿​​​﻿​﻿᠎﻿​​​​﻿​᠎﻿﻿​​﻿﻿​᠎﻿​﻿​﻿﻿​᠎﻿﻿﻿﻿​﻿​᠎﻿​​﻿﻿﻿﻿᠎﻿​​﻿﻿​﻿᠎﻿﻿﻿​﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿​﻿﻿​᠎﻿﻿​﻿​​​᠎﻿﻿﻿​​﻿᠎﻿​​​​﻿​᠎﻿﻿​﻿​﻿​᠎﻿﻿﻿​​﻿​᠎﻿​﻿​﻿﻿​᠎﻿﻿​﻿﻿​﻿᠎﻿﻿​​​​᠎﻿​​﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿​​​﻿﻿᠎﻿﻿﻿﻿​​﻿᠎﻿﻿﻿​​﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿﻿​​﻿᠎﻿﻿﻿​​​﻿᠎﻿﻿​​​​﻿᠎﻿​﻿​﻿​​᠎﻿​​​​﻿﻿᠎﻿﻿​​​​᠎﻿﻿​﻿​​᠎﻿﻿﻿​​​​᠎﻿​﻿﻿​​﻿᠎﻿﻿​​﻿​﻿᠎﻿​​​​﻿​᠎﻿﻿﻿​﻿﻿​᠎﻿﻿​﻿﻿﻿﻿᠎﻿﻿﻿​﻿﻿﻿᠎﻿​﻿​​﻿﻿᠎﻿﻿​​​﻿​᠎﻿﻿​​﻿​᠎﻿​﻿﻿​​​᠎﻿​﻿​​​﻿᠎﻿​​﻿​​﻿᠎﻿​​​﻿​​᠎﻿​​​​​﻿᠎﻿​﻿​​​﻿᠎﻿​​​​​﻿᠎﻿​​​​﻿​᠎﻿​﻿​᠎﻿​​​​​﻿᠎﻿﻿​﻿﻿﻿﻿᠎﻿​​​﻿﻿﻿᠎﻿​​​​﻿​᠎﻿​​​​​﻿᠎﻿​​﻿​﻿﻿᠎﻿​​​﻿﻿​᠎﻿​﻿​​﻿​᠎﻿﻿​﻿​​﻿᠎﻿﻿﻿​​​﻿᠎﻿​​﻿﻿​​᠎﻿​﻿﻿​​﻿᠎﻿​​﻿​​​᠎﻿﻿​​​﻿​᠎﻿﻿​﻿​​᠎﻿​﻿﻿​​​᠎﻿​​﻿﻿​﻿᠎﻿​​﻿﻿﻿​᠎﻿﻿​​﻿﻿᠎﻿​﻿​​​﻿᠎﻿​​​﻿​﻿᠎﻿﻿​﻿﻿​​᠎﻿﻿​﻿﻿​​᠎﻿​﻿﻿​﻿​᠎﻿﻿﻿​​​﻿᠎﻿﻿﻿​﻿​﻿᠎﻿​​﻿​﻿﻿᠎﻿﻿﻿​​﻿﻿᠎﻿﻿﻿​﻿﻿​᠎﻿​​﻿﻿​​᠎﻿​​​​​﻿᠎﻿﻿​​​﻿​᠎﻿﻿​﻿﻿﻿﻿᠎﻿﻿﻿​​​​᠎﻿﻿﻿﻿​​﻿᠎﻿﻿﻿​​​᠎﻿​﻿﻿​​​᠎﻿​​​​﻿﻿᠎﻿​​​​﻿​᠎﻿﻿​﻿​​᠎﻿​﻿​﻿﻿​᠎﻿﻿﻿​​​​᠎﻿​​﻿​​​᠎﻿​﻿﻿​﻿​᠎﻿﻿​​﻿﻿﻿᠎﻿﻿​​﻿﻿​᠎﻿​​﻿​​​᠎﻿​﻿​﻿﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿​​﻿﻿﻿﻿᠎﻿​﻿﻿﻿﻿᠎﻿﻿﻿​​​﻿᠎﻿​​﻿​​﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿﻿​​﻿᠎﻿﻿﻿​​​﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​﻿﻿﻿﻿᠎﻿﻿​﻿​﻿​᠎﻿​​​﻿​﻿᠎﻿﻿​﻿​​᠎﻿﻿​​﻿​​᠎﻿﻿​﻿﻿​​᠎﻿​​​​﻿​᠎﻿​﻿​᠎﻿﻿﻿​​​᠎﻿﻿﻿​﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​﻿﻿᠎﻿﻿﻿​​﻿᠎﻿​﻿​​​﻿᠎﻿﻿​​﻿​​᠎﻿﻿​﻿​​﻿᠎﻿﻿​​​﻿​᠎﻿﻿﻿​​​﻿᠎﻿﻿​﻿​​​᠎﻿﻿​​﻿﻿᠎﻿﻿​​﻿​﻿᠎﻿﻿​​​﻿​᠎﻿﻿﻿​﻿﻿​᠎﻿﻿﻿﻿​​﻿᠎﻿​​​​​﻿᠎﻿​​​﻿​​᠎﻿​​​﻿﻿​᠎﻿﻿​​﻿﻿​᠎﻿﻿﻿​﻿​﻿᠎﻿​​​﻿​​᠎﻿​​​​﻿​᠎﻿﻿​﻿﻿​​᠎﻿​​​﻿​﻿᠎﻿﻿​﻿​​​᠎﻿​﻿​﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​﻿​​᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​﻿﻿​​᠎﻿﻿﻿​﻿​​᠎﻿​​​​​﻿᠎﻿﻿​﻿​﻿​᠎﻿​​﻿﻿﻿​᠎﻿﻿﻿​​﻿​᠎﻿​﻿﻿​​﻿᠎﻿﻿﻿​​​​᠎﻿﻿​​﻿​﻿᠎﻿​﻿﻿​﻿​᠎﻿​﻿﻿​​﻿᠎﻿﻿​​​﻿᠎﻿﻿​​﻿​᠎﻿﻿​﻿​​᠎﻿﻿​​​﻿​᠎﻿﻿​​﻿​​᠎﻿﻿﻿﻿​​​᠎﻿﻿​﻿﻿﻿​᠎﻿﻿​​​​᠎﻿​​​﻿​​᠎﻿​​﻿​﻿﻿᠎﻿​﻿​﻿﻿᠎﻿​﻿​﻿​​᠎﻿﻿​​﻿​​᠎﻿﻿﻿​​​﻿᠎﻿﻿​﻿​​﻿᠎﻿​​﻿​﻿​᠎﻿​​﻿﻿​﻿᠎﻿​﻿​﻿﻿​᠎﻿​﻿﻿​​﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​​﻿​᠎﻿﻿​﻿﻿​​᠎﻿​​​﻿﻿​᠎﻿​﻿​᠎﻿​﻿​﻿​﻿᠎﻿﻿​﻿​​᠎﻿​﻿﻿﻿﻿᠎﻿﻿﻿​﻿﻿﻿᠎﻿﻿﻿﻿​​﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿﻿​​​᠎﻿​​﻿​​﻿᠎﻿​﻿​​﻿​᠎﻿﻿​​​﻿﻿᠎﻿﻿​​﻿​﻿᠎﻿​​​​﻿﻿᠎﻿​​​﻿​​᠎﻿﻿﻿​﻿﻿﻿᠎﻿​﻿﻿​​​᠎﻿﻿﻿​﻿﻿﻿᠎﻿﻿​​​​᠎﻿﻿​​﻿​﻿᠎﻿​﻿﻿​﻿​᠎﻿﻿​﻿﻿​᠎﻿﻿​​﻿​﻿᠎﻿​﻿﻿​​​᠎﻿﻿﻿​﻿​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​​﻿​﻿﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​​﻿​᠎﻿﻿​﻿​​​᠎﻿​​﻿﻿﻿​᠎﻿​﻿﻿﻿﻿᠎﻿​﻿﻿​​﻿᠎﻿﻿​﻿﻿​​᠎﻿​​​﻿﻿﻿᠎﻿​​​​​﻿᠎﻿​​﻿﻿﻿﻿᠎﻿﻿​​﻿﻿﻿᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿​​﻿﻿﻿​᠎﻿​﻿​​﻿﻿᠎﻿​﻿​​﻿​᠎﻿﻿​​​﻿﻿᠎﻿​​﻿​﻿﻿᠎﻿﻿​﻿﻿﻿​᠎﻿​​﻿​﻿﻿᠎﻿﻿﻿﻿​​​᠎﻿​﻿​﻿﻿​᠎﻿﻿​﻿﻿​​᠎﻿​​​​​﻿᠎﻿﻿​﻿​﻿﻿᠎﻿​​​﻿​﻿᠎﻿​​​​​﻿᠎﻿​﻿​﻿﻿᠎﻿​﻿﻿​​​᠎﻿​﻿​﻿﻿﻿᠎﻿​​﻿​​﻿᠎﻿﻿​​​﻿﻿᠎﻿﻿​﻿﻿​᠎﻿﻿​​​﻿﻿᠎﻿﻿﻿​​​᠎﻿​﻿​​​​᠎﻿​​﻿﻿​﻿᠎﻿​﻿​​​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​﻿​᠎﻿﻿​﻿​﻿​᠎﻿​﻿﻿​​﻿᠎﻿﻿​﻿﻿﻿᠎﻿﻿​﻿​​﻿᠎﻿﻿​​​﻿᠎﻿​​​﻿﻿​᠎﻿​﻿﻿​​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​﻿﻿᠎﻿﻿﻿​​﻿᠎﻿​​﻿﻿​﻿᠎﻿﻿﻿​​​​᠎﻿﻿​​​​﻿᠎﻿​﻿﻿​﻿​᠎﻿﻿​﻿​﻿᠎﻿﻿​﻿​​᠎﻿​﻿﻿​​​᠎﻿﻿​​﻿​᠎﻿﻿​﻿﻿﻿​᠎﻿​﻿﻿​﻿​᠎﻿﻿​﻿​​﻿᠎﻿﻿​​​﻿﻿᠎﻿﻿​﻿​​﻿᠎﻿﻿﻿​​​​᠎﻿﻿​​​​᠎﻿﻿​﻿​​﻿᠎﻿​﻿​﻿﻿᠎﻿﻿​﻿﻿​﻿᠎﻿﻿​​​﻿᠎﻿﻿​​​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿​​​﻿᠎﻿﻿​﻿﻿﻿﻿᠎﻿​​​﻿​​᠎﻿​﻿​﻿​​᠎﻿​​​​​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿﻿﻿​﻿​﻿᠎﻿﻿​​​​﻿᠎﻿​﻿​﻿﻿​᠎﻿﻿﻿﻿​​​᠎﻿﻿​﻿﻿﻿﻿᠎﻿​​​﻿​﻿᠎﻿﻿﻿​​﻿᠎﻿﻿﻿﻿​​​᠎﻿​﻿​​﻿﻿᠎﻿﻿​​​​﻿᠎﻿﻿﻿​​﻿​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​﻿﻿​᠎﻿​​​﻿​​᠎﻿﻿​﻿﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​​​᠎﻿​﻿​﻿​﻿᠎﻿﻿​﻿​​﻿᠎﻿﻿​﻿﻿​​᠎﻿​﻿​​​​᠎﻿﻿﻿​​​᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​​﻿​​᠎﻿​﻿﻿​​​᠎﻿﻿﻿​​﻿᠎﻿​﻿​᠎﻿﻿﻿​​​﻿᠎﻿﻿​﻿​​﻿᠎﻿​​﻿﻿​​᠎﻿​​​​﻿﻿᠎﻿﻿​﻿﻿﻿᠎﻿﻿​​﻿​᠎﻿​​﻿​​​᠎﻿﻿﻿​​﻿᠎﻿﻿﻿​​​᠎﻿﻿﻿​﻿﻿﻿᠎﻿​​﻿​﻿​᠎﻿​​​​﻿​᠎﻿​​​​​﻿᠎﻿​​﻿﻿​﻿᠎﻿﻿﻿​﻿​﻿᠎﻿﻿​​​﻿​᠎﻿​​​﻿﻿​᠎﻿​​﻿​﻿﻿᠎﻿﻿​﻿​​﻿᠎﻿​​﻿​​​᠎﻿﻿﻿​​​﻿᠎﻿﻿​​​﻿﻿᠎﻿​​﻿​​​᠎﻿​​﻿﻿﻿﻿᠎﻿﻿﻿​​​﻿᠎﻿​​﻿​​​᠎﻿﻿​​​﻿﻿᠎﻿​﻿​​​​᠎﻿﻿​﻿​​﻿᠎﻿﻿﻿​​​​᠎﻿​﻿​​​​᠎﻿​﻿﻿​​​᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​​﻿​﻿᠎﻿﻿﻿​﻿​​᠎﻿﻿​﻿​﻿​᠎﻿​﻿﻿​​​᠎﻿﻿​﻿​﻿᠎﻿﻿​﻿​﻿᠎﻿﻿​﻿​﻿᠎﻿​​​﻿​﻿᠎﻿﻿​﻿﻿​​᠎﻿​﻿﻿​﻿​᠎﻿​﻿﻿﻿﻿᠎﻿﻿​﻿﻿​᠎﻿﻿﻿﻿​​﻿᠎﻿﻿​​​​᠎﻿​﻿﻿​﻿​᠎﻿​​﻿​﻿​᠎﻿﻿​﻿​​﻿᠎﻿​​​​﻿​᠎﻿​​​​﻿﻿᠎﻿​﻿​﻿﻿​᠎﻿﻿​﻿﻿​﻿᠎﻿﻿​​﻿﻿​᠎﻿﻿​﻿​​᠎﻿​﻿​﻿​﻿᠎﻿​​​​​﻿᠎﻿﻿​﻿﻿﻿​᠎﻿﻿﻿​﻿​​᠎﻿﻿﻿​​﻿﻿᠎﻿​​﻿​﻿​᠎﻿﻿﻿​﻿﻿﻿᠎﻿​﻿﻿​﻿​᠎﻿​﻿​᠎﻿﻿﻿﻿​​﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿﻿​​​﻿᠎﻿​﻿​​​​᠎﻿﻿﻿﻿​​﻿᠎﻿﻿​﻿﻿﻿᠎﻿﻿﻿​​﻿﻿᠎﻿﻿​​﻿​᠎﻿﻿﻿​​﻿​᠎﻿﻿​﻿﻿​﻿᠎﻿​﻿​﻿​﻿᠎﻿﻿﻿﻿​﻿​᠎﻿​​​​﻿​᠎﻿​​﻿﻿​﻿᠎﻿﻿​﻿​​᠎﻿​﻿​​​﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿﻿​﻿​﻿᠎﻿﻿﻿​​​﻿᠎﻿﻿​​﻿﻿​᠎﻿​﻿﻿​​﻿᠎﻿﻿​​​﻿​᠎﻿​﻿​​﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿​​﻿​᠎﻿​﻿​﻿﻿﻿᠎﻿﻿﻿​​﻿᠎﻿﻿﻿​​​﻿᠎﻿﻿﻿﻿​​​᠎﻿﻿﻿​​﻿﻿᠎﻿​​﻿​﻿​᠎﻿﻿﻿﻿​﻿​᠎﻿​﻿​​​​᠎﻿﻿​﻿﻿​﻿᠎﻿﻿﻿​​​᠎﻿​​​​﻿﻿᠎﻿​﻿​​​﻿᠎﻿​​​﻿﻿﻿᠎﻿​﻿﻿​﻿​᠎﻿﻿​﻿​​​᠎﻿​﻿﻿​​​᠎﻿﻿​​﻿​᠎﻿​﻿​​​﻿᠎﻿﻿​​﻿﻿​᠎﻿﻿​﻿​​᠎﻿﻿​​​﻿​᠎﻿​​​​​﻿᠎﻿​​﻿​﻿﻿᠎﻿﻿​​​​᠎﻿﻿​​​﻿​᠎﻿﻿​﻿​​﻿᠎﻿​﻿﻿​﻿​᠎﻿​﻿​​﻿﻿᠎﻿​​﻿﻿﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿​​﻿​﻿᠎﻿​﻿﻿​﻿​᠎﻿​﻿​﻿​​᠎﻿﻿﻿​​​᠎﻿﻿​​​﻿᠎﻿​​﻿﻿﻿﻿᠎﻿﻿​​​﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿​﻿﻿​​﻿᠎﻿​﻿​᠎﻿​​﻿﻿﻿​᠎﻿﻿​​﻿﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿﻿​​​﻿᠎﻿﻿﻿​​﻿﻿᠎﻿﻿​​​﻿᠎﻿​﻿﻿​﻿​᠎﻿​​​​﻿﻿᠎﻿​​﻿​​​᠎﻿﻿​​​﻿​᠎﻿﻿​﻿​​​᠎﻿﻿​​﻿​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​​​﻿​​᠎﻿﻿​﻿﻿​﻿᠎﻿﻿​﻿​​​᠎﻿​​​﻿​​᠎﻿​﻿​﻿﻿﻿᠎﻿​​﻿﻿​​᠎﻿﻿﻿﻿​​​᠎﻿﻿﻿​​﻿﻿᠎﻿﻿​﻿​​﻿᠎﻿﻿​﻿​​﻿᠎﻿﻿​​﻿​​᠎﻿﻿​﻿﻿﻿᠎﻿﻿​﻿​﻿᠎﻿​﻿​﻿​﻿᠎﻿​​﻿​﻿​᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿﻿﻿᠎﻿﻿​﻿﻿﻿​᠎﻿​​﻿﻿​﻿᠎﻿​​﻿​​﻿᠎﻿﻿​​﻿﻿﻿᠎﻿​​﻿﻿﻿​᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿﻿​﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​﻿​​᠎﻿﻿​﻿​﻿​᠎﻿​​​﻿​​᠎﻿​﻿​﻿​﻿᠎﻿﻿​​﻿﻿﻿᠎﻿​​﻿﻿​﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿​﻿​​​᠎﻿﻿﻿​​​᠎﻿﻿﻿​​​᠎﻿​﻿​﻿﻿​᠎﻿​﻿​​​﻿᠎﻿​﻿​​﻿​᠎﻿​​﻿﻿​​᠎﻿﻿​﻿​​﻿᠎﻿﻿​​﻿﻿​᠎﻿﻿​​﻿​﻿᠎﻿​﻿﻿​​​᠎﻿​​﻿​​​᠎﻿﻿﻿﻿​​​᠎﻿​​﻿﻿​﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​​​﻿᠎﻿​​​﻿​​᠎﻿﻿​​﻿​᠎﻿​﻿﻿​​﻿᠎﻿​﻿​᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​​﻿﻿﻿᠎﻿﻿​​​​﻿᠎﻿​​﻿﻿﻿﻿᠎﻿﻿﻿​﻿​﻿᠎﻿​﻿﻿​﻿​᠎﻿​﻿​​﻿﻿᠎﻿​﻿​﻿​﻿᠎﻿﻿​﻿​​﻿᠎﻿﻿﻿​​​᠎﻿﻿﻿​​​﻿᠎﻿​﻿​﻿﻿᠎﻿​﻿﻿​​​᠎﻿﻿​﻿﻿​᠎﻿​﻿​﻿﻿᠎﻿﻿﻿​﻿﻿﻿᠎﻿﻿​​﻿﻿​᠎﻿﻿﻿​﻿​﻿᠎﻿​﻿﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿​​​﻿﻿᠎﻿﻿​﻿﻿﻿᠎﻿﻿​﻿​​᠎﻿﻿﻿﻿​​﻿᠎﻿​﻿​﻿﻿᠎﻿﻿​﻿​﻿᠎﻿﻿​​​﻿᠎﻿​﻿﻿​﻿​᠎﻿﻿﻿​​﻿​᠎﻿﻿​​﻿﻿᠎﻿​﻿​​​​᠎﻿​​​﻿﻿​᠎﻿​﻿​​​​᠎﻿​﻿​​﻿﻿᠎﻿​﻿﻿﻿﻿᠎﻿﻿​​﻿﻿​᠎﻿​﻿​​​﻿᠎﻿﻿﻿​​​﻿᠎﻿​﻿﻿​﻿​᠎﻿​﻿​﻿﻿﻿᠎﻿﻿​​﻿﻿﻿᠎﻿​﻿​﻿﻿﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿​﻿﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​﻿​﻿᠎﻿﻿​​​﻿​᠎﻿﻿​﻿​﻿﻿᠎﻿﻿﻿​﻿﻿﻿᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿​​﻿᠎﻿﻿​​﻿﻿﻿᠎﻿​﻿​​​​᠎﻿﻿​​​﻿᠎﻿​﻿​﻿​​᠎﻿﻿​﻿​﻿​᠎﻿﻿﻿​​﻿​᠎﻿​​​﻿​﻿᠎﻿﻿​﻿​﻿᠎﻿​​﻿​​​᠎﻿​﻿​​﻿﻿᠎﻿​﻿​​​﻿᠎﻿​​​﻿﻿﻿᠎﻿​﻿​᠎﻿﻿​​﻿​﻿᠎﻿﻿﻿​​​᠎﻿​​﻿﻿​﻿᠎﻿​​﻿​﻿​᠎﻿﻿​﻿​﻿﻿᠎﻿﻿﻿​﻿﻿​᠎﻿​​﻿​﻿﻿᠎﻿﻿﻿​​﻿​᠎﻿​﻿​﻿​﻿᠎﻿﻿​﻿﻿﻿﻿᠎﻿​﻿﻿​​​᠎﻿﻿​​﻿​​᠎﻿﻿﻿​​​​᠎﻿​​﻿﻿﻿﻿᠎﻿​​﻿​​﻿᠎﻿﻿​﻿​​​᠎﻿​​﻿​​﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿﻿​​﻿﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​​​﻿᠎﻿​﻿​​​﻿᠎﻿​​​﻿​​᠎﻿​﻿﻿​​﻿᠎﻿​﻿​﻿﻿​᠎﻿​​​﻿﻿﻿᠎﻿​​﻿​​​᠎﻿﻿​​﻿﻿​᠎﻿​﻿​﻿​​᠎﻿​​​﻿﻿​᠎﻿​​﻿﻿​﻿᠎﻿﻿​﻿﻿​​᠎﻿​​​​﻿​᠎﻿﻿﻿​​﻿﻿᠎﻿​​﻿​​﻿᠎﻿﻿﻿​​​﻿᠎﻿​﻿​​​﻿᠎﻿​﻿​​​​᠎﻿​﻿﻿﻿﻿᠎﻿﻿﻿​﻿​​᠎﻿​﻿​​​​᠎﻿﻿​​﻿​​᠎﻿​​​​﻿​᠎﻿﻿​﻿﻿​​᠎﻿﻿﻿﻿​​﻿᠎﻿​﻿﻿​﻿​᠎﻿﻿​​﻿​​᠎﻿​​﻿​﻿​᠎﻿﻿​​﻿​᠎﻿​​﻿﻿﻿﻿᠎﻿﻿​​﻿﻿​᠎﻿​﻿​​﻿﻿᠎﻿﻿​​​﻿​᠎﻿﻿﻿﻿​​﻿᠎﻿﻿﻿​​﻿​᠎﻿​﻿​﻿​​᠎﻿﻿﻿​﻿​﻿᠎﻿​​﻿﻿​​᠎﻿​​﻿﻿​﻿᠎﻿​​​﻿﻿﻿᠎﻿​﻿​​﻿​᠎﻿﻿​﻿﻿​᠎﻿﻿​​﻿​᠎﻿​﻿​﻿﻿᠎﻿​﻿​᠎﻿​﻿​​​​᠎﻿﻿﻿​﻿﻿​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​﻿﻿﻿᠎﻿﻿​﻿​​᠎﻿﻿﻿​​﻿​᠎﻿​﻿​﻿​﻿᠎﻿​​​​﻿﻿᠎﻿﻿​​​​᠎﻿﻿​​﻿​﻿᠎﻿​​﻿﻿​﻿᠎﻿​﻿﻿​﻿​᠎﻿​​​﻿﻿​᠎﻿﻿​﻿﻿​᠎﻿﻿​﻿​﻿﻿᠎﻿​​﻿﻿﻿﻿᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿﻿﻿​᠎﻿​​﻿﻿﻿​᠎﻿﻿​​​﻿᠎﻿​​​﻿​﻿᠎﻿﻿​﻿​​​᠎﻿﻿﻿​​​᠎﻿​​﻿​﻿﻿᠎﻿​​﻿﻿​﻿᠎﻿​﻿​﻿​﻿᠎﻿﻿﻿​​​﻿᠎﻿﻿​​﻿﻿﻿᠎﻿​﻿​﻿﻿﻿᠎﻿​​﻿​​﻿᠎﻿​﻿​﻿​​᠎﻿﻿​﻿﻿﻿᠎﻿﻿​﻿​​᠎﻿​​﻿​﻿​᠎﻿﻿​﻿﻿​﻿᠎﻿﻿​​﻿﻿​᠎﻿﻿﻿​﻿​​᠎﻿​​﻿​﻿​᠎﻿​​​﻿﻿﻿᠎﻿​​​﻿​​᠎﻿﻿​﻿﻿﻿᠎﻿​﻿​​​﻿᠎﻿﻿​﻿​​​᠎﻿​​﻿​﻿​᠎﻿​﻿​᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​​​﻿​﻿᠎﻿​​﻿﻿﻿​᠎﻿​​​﻿​​᠎﻿​​​​​᠎﻿​﻿​​﻿​᠎﻿​﻿​​﻿﻿᠎﻿​​​​​﻿᠎﻿​​​​​᠎﻿​﻿​​​​᠎﻿​﻿​​﻿​᠎﻿​​﻿​​﻿᠎﻿​﻿​﻿﻿​᠎﻿​​​​​﻿᠎﻿​﻿​﻿​​᠎﻿​​​﻿​﻿᠎﻿​​​​​᠎﻿​​﻿​﻿﻿᠎﻿​​​﻿​﻿᠎﻿​﻿﻿​​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿​᠎﻿﻿﻿​﻿​᠎﻿​﻿﻿﻿᠎﻿﻿﻿​​​​᠎﻿﻿﻿​﻿​﻿᠎﻿﻿​​​﻿​᠎﻿﻿​﻿﻿​​᠎﻿﻿​﻿​​﻿᠎﻿﻿​​​﻿﻿᠎﻿​﻿﻿﻿﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿​​﻿​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​﻿﻿﻿﻿﻿᠎﻿﻿​​​﻿﻿᠎﻿﻿​﻿﻿﻿﻿᠎﻿﻿​﻿﻿﻿​᠎﻿﻿﻿​﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​﻿﻿﻿​᠎﻿﻿﻿​﻿​​᠎﻿​​​﻿​᠎﻿​᠎﻿​​​​᠎﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​​​​﻿​᠎﻿​​​﻿​﻿᠎﻿​​​﻿﻿﻿᠎﻿​​﻿​​﻿᠎﻿​​﻿﻿﻿​᠎﻿​​​​​᠎﻿​﻿​​​​᠎﻿​﻿​﻿​﻿᠎﻿​​​​﻿​᠎﻿​​﻿﻿​​᠎﻿​​﻿​​﻿᠎﻿​​​​﻿﻿᠎﻿​​​​​᠎﻿​​﻿​﻿﻿᠎﻿​​​﻿​﻿᠎﻿​﻿﻿​​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿​᠎﻿​​﻿﻿​﻿᠎﻿​​﻿​​﻿᠎﻿​​​﻿﻿﻿᠎﻿﻿​​﻿﻿​᠎﻿​​﻿﻿​﻿᠎﻿​​​​​﻿᠎﻿﻿​​​​᠎﻿​​​﻿﻿﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​​﻿﻿᠎﻿﻿﻿​​​﻿᠎﻿​​​﻿﻿﻿᠎﻿​﻿​​﻿﻿᠎﻿​​﻿​​﻿᠎﻿﻿​​​﻿​᠎﻿﻿​​﻿﻿᠎﻿​​​﻿​​᠎﻿​﻿​​​﻿᠎﻿​​​﻿​﻿᠎﻿​​​​﻿​᠎﻿​​​​​﻿᠎﻿​﻿​​​﻿᠎﻿​﻿​﻿​﻿᠎﻿​​​​​﻿᠎﻿​​​​​﻿᠎﻿﻿​﻿​​᠎﻿​​​﻿﻿﻿᠎﻿​​﻿﻿﻿​᠎﻿​​​​​﻿᠎﻿​​​﻿​​᠎﻿​​​​﻿﻿᠎﻿​​​​﻿​᠎﻿﻿​﻿​​﻿᠎﻿​﻿​​​﻿᠎﻿​​﻿​﻿﻿᠎﻿​​​​﻿​᠎﻿﻿​​﻿﻿﻿᠎﻿​﻿​​​﻿᠎﻿​​​﻿​​᠎﻿​​​﻿﻿﻿᠎﻿​﻿﻿​﻿​᠎﻿﻿​​​﻿᠎﻿​​​﻿﻿​᠎﻿​﻿​﻿﻿᠎﻿﻿﻿​﻿​﻿᠎﻿﻿​﻿﻿​᠎﻿​​​​​﻿᠎﻿​​​​﻿​᠎﻿​​​​﻿​᠎﻿﻿​​﻿​﻿᠎﻿​​​﻿﻿​᠎﻿​​﻿﻿﻿﻿᠎﻿​﻿﻿​​​᠎﻿​﻿﻿﻿﻿᠎﻿﻿﻿​​﻿᠎﻿﻿﻿​﻿​﻿᠎﻿​​﻿​﻿﻿᠎﻿﻿​﻿​​﻿᠎﻿​​﻿​​﻿᠎﻿﻿﻿​​​᠎﻿﻿​​﻿​​᠎﻿﻿﻿​​​﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿​​﻿﻿᠎﻿​﻿​᠎﻿﻿​​﻿﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿​﻿​​​᠎﻿​​﻿​​﻿᠎﻿​﻿﻿​​​᠎﻿​﻿﻿​​​᠎﻿﻿​﻿﻿​​᠎﻿﻿​﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿​​​​﻿᠎﻿​﻿﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿﻿​﻿﻿​᠎﻿​​﻿﻿﻿﻿᠎﻿​​﻿​﻿​᠎﻿﻿﻿​​​᠎﻿​​﻿​​​᠎﻿​﻿​​​﻿᠎﻿﻿﻿﻿​​﻿᠎﻿﻿﻿​​​᠎﻿​﻿​﻿﻿᠎﻿​﻿​​​​᠎﻿﻿​​﻿​﻿᠎﻿﻿﻿​​﻿﻿᠎﻿​​​﻿﻿​᠎﻿﻿﻿​﻿​﻿᠎﻿​﻿​﻿﻿​᠎﻿​﻿​﻿﻿᠎﻿​​​​​﻿᠎﻿​﻿﻿​​﻿᠎﻿​​​​﻿​᠎﻿﻿​﻿﻿​᠎﻿﻿​﻿​​﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿﻿​﻿﻿﻿᠎﻿﻿﻿​​﻿​᠎﻿﻿﻿​​﻿﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿​﻿​​​᠎﻿​​​﻿﻿​᠎﻿﻿​​﻿﻿​᠎﻿​​​​﻿﻿᠎﻿﻿​​﻿​﻿᠎﻿​​﻿​﻿﻿᠎﻿﻿​﻿﻿﻿᠎﻿​​​﻿​﻿᠎﻿​﻿​﻿​﻿᠎﻿﻿﻿​﻿​​᠎﻿​﻿﻿​﻿​᠎﻿​​﻿﻿​​᠎﻿​​﻿﻿﻿​᠎﻿﻿﻿﻿​​​᠎﻿​﻿​​﻿​᠎﻿﻿﻿​﻿﻿​᠎﻿​﻿﻿​​​᠎﻿​﻿﻿​﻿​᠎﻿﻿​​​﻿​᠎﻿﻿​​​﻿​᠎﻿​﻿​​﻿﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿​﻿​​​᠎﻿​﻿​​​​᠎﻿​​﻿​​​᠎﻿​​​​​﻿᠎﻿​﻿​᠎﻿​﻿​﻿​​᠎﻿​​​​﻿​᠎﻿﻿﻿​​​​᠎﻿﻿​​﻿﻿﻿᠎﻿﻿​﻿​​​᠎﻿﻿​​﻿​​᠎﻿﻿﻿​﻿﻿​᠎﻿﻿​​﻿﻿᠎﻿​​﻿​​﻿᠎﻿﻿﻿​﻿﻿﻿᠎﻿​﻿​​​​᠎﻿​​​﻿​​᠎﻿​​﻿​﻿​᠎﻿﻿﻿​​﻿᠎﻿﻿​﻿​﻿​᠎﻿﻿﻿​​​᠎﻿﻿﻿​﻿​﻿᠎﻿﻿​﻿﻿​᠎﻿﻿​​​​﻿᠎﻿​​​​﻿​᠎﻿​​​​﻿​᠎﻿﻿​﻿﻿﻿᠎﻿​﻿​﻿﻿᠎﻿﻿​﻿​﻿᠎﻿﻿​​﻿﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿﻿﻿​​﻿᠎﻿​​﻿​﻿﻿᠎﻿​​﻿﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​​​﻿᠎﻿​​​﻿​﻿᠎﻿​﻿​﻿﻿​᠎﻿​​﻿​​﻿᠎﻿﻿​​﻿﻿﻿᠎﻿​​​​﻿﻿᠎﻿​​​﻿​﻿᠎﻿​​​​﻿​᠎﻿﻿​​﻿﻿​᠎﻿​﻿​﻿﻿​᠎﻿﻿﻿﻿​﻿​᠎﻿​​﻿﻿﻿﻿᠎﻿​​﻿﻿​﻿᠎﻿﻿﻿​﻿​​᠎﻿﻿​​﻿​﻿᠎﻿﻿​﻿​﻿﻿᠎﻿﻿﻿﻿​﻿​᠎﻿﻿​﻿﻿​᠎﻿﻿​﻿​​​᠎﻿﻿﻿​​﻿᠎﻿​​​​﻿​᠎﻿﻿​﻿​﻿​᠎﻿﻿﻿​​﻿​᠎﻿​﻿​﻿﻿​᠎﻿﻿​﻿﻿​﻿᠎﻿﻿​​​​᠎﻿​​﻿​​​᠎﻿﻿﻿​​​​᠎﻿﻿​​​﻿﻿᠎﻿﻿﻿﻿​​﻿᠎﻿﻿﻿​​﻿᠎﻿​​​​﻿﻿᠎﻿​﻿​﻿﻿﻿᠎﻿﻿﻿​​﻿᠎﻿​﻿​᠎﻿﻿﻿​​​﻿᠎﻿﻿​​​​﻿᠎﻿​﻿​﻿​​᠎﻿​​​​﻿﻿᠎﻿﻿​​​​᠎﻿﻿​﻿​​᠎﻿﻿﻿​​​​᠎﻿​﻿﻿​​﻿᠎﻿﻿​​﻿​﻿᠎﻿​​​​﻿​᠎﻿﻿﻿​﻿﻿​᠎﻿﻿​﻿﻿﻿﻿᠎﻿﻿﻿​﻿﻿﻿᠎﻿​﻿​​﻿﻿᠎﻿﻿​​​﻿​᠎﻿﻿​​﻿​᠎﻿​﻿﻿​​​᠎﻿​﻿​​​﻿᠎﻿​​﻿​​﻿᠎﻿​​​﻿​​᠎﻿​​​​​﻿᠎﻿​﻿​​​﻿᠎﻿​​​​​﻿᠎﻿​​​​﻿​᠎﻿​﻿​᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​​​﻿​﻿᠎﻿​​﻿﻿﻿​᠎﻿​​​﻿​​᠎﻿​​​​​᠎﻿​﻿​​​​᠎﻿​﻿​﻿​﻿᠎﻿​​​​﻿​᠎﻿​​﻿﻿​​᠎﻿​​﻿​​﻿᠎﻿​​​​﻿﻿᠎﻿​​​​​᠎﻿​​﻿​﻿﻿᠎﻿​​​﻿​﻿᠎﻿​﻿﻿​​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿﻿​﻿᠎﻿​﻿​
EOF
      estore_path = "#{ENV['HOME']}/.cript.estore"

      h = Hidr.new
      @ehash = EHash.new(estore_path, {
        crypt_class: Conc,
        size: 1024
      }.merge(
        Marshal.load(h.s(my_data))
      ))
    end

    def method_missing(sym, *args)
      @ehash.send(sym, *args)
    end
  end
end
